defmodule Screens.Cache.Client do
  @moduledoc """
  Provides some conveniences for a cache client module.
  """

  defmacro __using__(table: table) do
    quote do
      @table unquote(table)

      @doc """
      Returns the name of the table that this client reads from.
      (Generated by `use Screens.Cache.Client`)
      """
      def table, do: @table

      @doc """
      Wraps a code block in a `table_exists?()` check.

      If the check fails, an `{:error, reason}` tuple, or the provided `:default` value, is returned.

      Options:
      - `:default` - value to return if the table is missing

      (Generated by `use Screens.Cache.Client`)
      """
      defmacro with_table(opts \\ [], do: block) do
        default =
          case Keyword.fetch(opts, :default) do
            {:ok, default_value} -> quote(do: unquote(Macro.escape(default_value)))
            :error -> quote(do: {:error, "ETS table #{inspect(@table)} does not exist"})
          end

        quote do
          if table_exists?() do
            unquote(block)
          else
            unquote(default)
          end
        end
      end

      @doc """
      Returns true if the table that this client reads from exists.
      (Generated by `use Screens.Cache.Client`)
      """
      def table_exists? do
        :ets.whereis(@table) != :undefined
      end
    end
  end
end
